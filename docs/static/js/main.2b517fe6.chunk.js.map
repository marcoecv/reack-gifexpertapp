{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGritItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","tittle","title","images","downsized_medium","GifGritItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","setcategories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAiBhD,OACI,uBAAMC,SAVW,SAAAC,GACjBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAG,OAAIP,GAAJ,mBAAkBO,OACnCN,EAAc,MAKlB,UACI,8CACA,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAnBc,SAAAP,GACtBF,EAAcE,EAAEQ,OAAOF,c,+BCRjBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACdC,EADc,iDACmCC,UAAUH,GAD7C,+DAEDI,MAAMF,GAFL,cAEdG,EAFc,gBAGGA,EAAKC,OAHR,uBAGZC,EAHY,EAGZA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAGD,EAAIC,GACPC,OAAOF,EAAIG,MACXX,IAAIQ,EAAII,OAAOC,iBAAiBb,QATpB,kBAabM,GAba,4CAAH,sDCERQ,EAAc,SAAC,GAAqB,IAAnBJ,EAAkB,EAAlBA,OAAQV,EAAU,EAAVA,IAClC,OACI,sBAAKe,UAAU,QAAf,UACI,qBAAKC,IAAMhB,EAAMiB,IAAMP,IACvB,4BAAKA,QCFJQ,EAAU,SAAC,GAAoB,IAAjBpB,EAAgB,EAAhBA,SAAgB,ECDf,SAAEA,GAAc,IAAD,EACbd,mBAAS,CAC/BqB,KAAK,GACLc,SAAQ,IAH2B,mBAChCC,EADgC,KACzBC,EADyB,KAkBvC,OAZAC,qBAAW,WACPzB,EAASC,GACJyB,MAAK,SAAAC,GACFH,EAAS,CACLhB,KAAKmB,EACLL,SAAQ,SAKrB,CAACrB,IAEGsB,EDb0BK,CAAc3B,GAAlCc,EAJ0B,EAI/BP,KAAac,EAJkB,EAIlBA,QAErB,OACI,qCACI,6BAAMrB,IACJqB,GAAW,mBAAGJ,UAAU,mCAAb,qBACb,qBAAKA,UAAU,YAAf,SACMH,EAAOL,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eAESA,GADGA,EAAIC,aEbvBiB,EAAe,WAAM,MAIM1C,mBAAS,CAAE,cAJjB,mBAIvB2C,EAJuB,KAIXC,EAJW,KAY9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAa7C,cAAgB6C,IAC7B,uBACA,6BAEQD,EAAWpB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CACIA,SAAUA,GACJA,Y,MCrBlC+B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.2b517fe6.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n    const [inputValue, setinputValue] = useState('');\r\n\r\n    const handleInputChange = e =>{\r\n        setinputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 2){\r\n            setCategories(cat=> [inputValue,...cat]); //Recordar el callback que posee setCategories, este contiene el estado de las categorias del componente superior\r\n            setinputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <h2>Add Category</h2>\r\n            <input\r\n                type='text'\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    );\r\n\r\n    \r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories:PropTypes.func.isRequired\r\n}","export const  getGifs = async( category ) =>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=bcecEYe0pbkfsxlyAEhOzUyKG2aGoKY1`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id:img.id,\r\n            tittle:img.title,\r\n            url:img.images.downsized_medium.url\r\n        }\r\n    })\r\n    // console.log(gifs);\r\n    return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGritItem = ({ tittle, url }) => {\r\n    return (\r\n        <div className='card '>\r\n            <img src={ url } alt={ tittle }/>\r\n            <p>{ tittle }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { /*useState,useEffect*/ } from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGritItem } from './GifGritItem';\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n    //use effect funciona como el componendidmount y hará que la función getGifs solo se ejecute una unica vez, \r\n    //de lo contrario se ejecutaria cada vez que el estado del componente cambia\r\n\r\n    const { data:images, loading } = useFetchGifs( category );//data:images es uuna forma de renombrar la variable a nivel de desestructuración\r\n\r\n    return (\r\n        <>\r\n            <h3>{ category }</h3>\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> /* If Ternario de una sola cundición solo se ejecuta en caso de que loading sea true*/ } \r\n            <div className=\"card-grid\">\r\n                { images.map( img =>\r\n                    <GifGritItem \r\n                        key = { img.id }\r\n                        { ...img }//Envía todas las propiedades de img como props individuales\r\n                    />\r\n                )}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) =>{\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs( category )\r\n            .then(imgs => {\r\n                setstate({\r\n                    data:imgs,\r\n                    loading:false\r\n                });\r\n                \r\n            })\r\n\r\n    }, [category])\r\n\r\n    return state;\r\n}\r\n\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    //const categories = [ 'One Punch', 'Samurai X', 'Dragon Ball' ]\r\n\r\n    const [categories, setcategories] = useState([ 'One Punch' ]);\r\n\r\n    // const handleAdd = () => {\r\n    //     //setcategories([ ...categories,'Queen']) //Uso de operador spread para crear un nuevo arreglo y agregar un elemento a final\r\n    //     setcategories(cat => [...cat,'Queen']);//Recordar que set categories puede tener un callback como parametro\r\n    // }\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setcategories }/>\r\n            <hr/>\r\n            <ol>\r\n                {\r\n                    categories.map(category =>\r\n                        <GifGrid \r\n                            category={category}\r\n                            key={ category }\r\n                    />\r\n                    )\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}